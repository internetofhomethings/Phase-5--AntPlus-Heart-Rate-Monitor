package org.apache.cordova.antplus.heartrate;

    import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;

    import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
    
    //ant+ plugins
    import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc;
import com.dsi.ant.plugins.antplus.pccbase.AntPluginPcc.IPluginAccessResultReceiver;
import com.dsi.ant.plugins.antplus.pccbase.MultiDeviceSearch.MultiDeviceSearchResult;

import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc;
import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc.DataState;
import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc.ICalculatedRrIntervalReceiver;
import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc.IHeartRateDataReceiver;
import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc.IPage4AddtDataReceiver;
import com.dsi.ant.plugins.antplus.pcc.AntPlusHeartRatePcc.RrFlag;
import com.dsi.ant.plugins.antplus.pcc.defines.DeviceState;
import com.dsi.ant.plugins.antplus.pcc.defines.EventFlag;
import com.dsi.ant.plugins.antplus.pcc.defines.RequestAccessResult;
import com.dsi.ant.plugins.antplus.pccbase.AntPlusCommonPcc.IRssiReceiver;
import com.dsi.ant.plugins.antplus.pccbase.PccReleaseHandle;
import com.dsi.ant.plugins.antplus.pccbase.AntPluginPcc.IDeviceStateChangeReceiver;
import com.dsi.ant.plugins.antplus.pccbase.AntPluginPcc.IPluginAccessResultReceiver;
import com.dsi.ant.plugins.antplus.pccbase.AntPlusLegacyCommonPcc.ICumulativeOperatingTimeReceiver;
import com.dsi.ant.plugins.antplus.pccbase.AntPlusLegacyCommonPcc.IManufacturerAndSerialReceiver;
import com.dsi.ant.plugins.antplus.pccbase.AntPlusLegacyCommonPcc.IVersionAndModelReceiver;

    /**
     * This class echoes a string called from JavaScript.
     */
    public class FindHeartRateMonitor extends CordovaPlugin {

        AntPlusHeartRatePcc hrPcc = null;
        protected PccReleaseHandle<AntPlusHeartRatePcc> releaseHandle = null;

        @Override
        public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
            if (action.equals("Echo")) {
                String message = args.getString(0);
                this.echo(message, callbackContext);
                return true;
            }
            if (action.equals("FindHeartRateMonitor")) {
                String message = args.getString(1);
                this.echo(message, callbackContext);
                //IPluginAccessResultReceiver<AntPlusHeartRatePcc> base_IPluginAccessResultReceiver;
				//IDeviceStateChangeReceiver base_IDeviceStateChangeReceiver;
				// starts the plugins UI search
                releaseHandle = AntPlusHeartRatePcc.requestAccess(this.cordova.getActivity(), this.cordova.getActivity(), 
                		base_IPluginAccessResultReceiver, base_IDeviceStateChangeReceiver);
                		
                		//.requestAccess(this, 0,
                        //base_IPluginAccessResultReceiver, base_IDeviceStateChangeReceiver);
                return true;
            }
            return false;
        }
        IPluginAccessResultReceiver<AntPlusHeartRatePcc> base_IPluginAccessResultReceiver =
            new IPluginAccessResultReceiver<AntPlusHeartRatePcc>()
            {
                //Handle the result, connecting to events on success or reporting failure to user.
                @Override
                public void onResultReceived(AntPlusHeartRatePcc result, RequestAccessResult resultCode,
                    DeviceState initialDeviceState)
                {
                }
            };
        //Receives state changes and shows it on the status display line
        protected  IDeviceStateChangeReceiver base_IDeviceStateChangeReceiver =
            new IDeviceStateChangeReceiver()
        {
            @Override
            public void onDeviceStateChange(final DeviceState newDeviceState)
            {
            	
            }
        };

        private void echo(String message, CallbackContext callbackContext) {
            if (message != null && message.length() > 0) {
                callbackContext.success(message);
            } else {
                callbackContext.error("Expected one non-empty string argument.");
            }
        }
    }